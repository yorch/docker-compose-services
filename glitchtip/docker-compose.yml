x-environment: &default-environment
  - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  - SECRET_KEY=${SECRET_KEY}
  - PORT=${GLITCHTIP_PORT:-8000}
  - GLITCHTIP_DOMAIN=${GLITCHTIP_URL}
  - DEFAULT_FROM_EMAIL=${EMAIL_FROM}
  # - EMAIL_URL=${EMAIL_URL}
  - EMAIL_HOST_USER=${EMAIL_HOST_USER}
  - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
  - EMAIL_HOST=${EMAIL_HOST}
  - EMAIL_PORT=${EMAIL_PORT}
  - EMAIL_USE_TLS=${EMAIL_USE_TLS}
  # (Default True) When True, any user will be able to register. When False, user self-signup is
  # disabled after the first user is registered. Subsequent users must be created by a
  # superuser on the backend and organization invitations may only be sent to existing users.
  - ENABLE_USER_REGISTRATION=${ENABLE_USER_REGISTRATION}
  # (Default False) When False, only superusers will be able to create new organizations after
  # the first. When True, any user can create a new organization.
  - ENABLE_ORGANIZATION_CREATION=${ENABLE_ORGANIZATION_CREATION}
  # Number of concurrent celery workers. Defaults to number of CPU cores. Highly recommended to change
  - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-2}
  # Scale between 1 and 3 to prevent excessive memory usage. Change it or remove to set it to the number of cpu cores.
  # - CELERY_WORKER_AUTOSCALE="1,3"
  - CELERY_WORKER_MAX_TASKS_PER_CHILD=${CELERY_WORKER_MAX_TASKS_PER_CHILD:-100}
  # (Default 90) Events and associated data older than this will be deleted.
  - GLITCHTIP_MAX_EVENT_LIFE_DAYS=${GLITCHTIP_MAX_EVENT_LIFE_DAYS:-90}
  # (Default to max event life days) Transaction events older than this will be deleted.
  - GLITCHTIP_MAX_TRANSACTION_EVENT_LIFE_DAYS=${GLITCHTIP_MAX_TRANSACTION_EVENT_LIFE_DAYS:-90}
  # (Defaults to 2 * max event life days) Files older than this will be deleted. Files with any
  # reference to a recent event are excluded. For example, a year old file that is used for an
  # active release with event data, will not be deleted.
  - GLITCHTIP_MAX_TRANSACTION_LIFE_DAYS=${GLITCHTIP_MAX_TRANSACTION_LIFE_DAYS:-180}

x-depends_on: &default-depends_on
  postgres:
    condition: service_healthy
  redis:
    condition: service_healthy

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGUSER=${POSTGRES_USER} # Needed?
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 1s
      timeout: 3s
      retries: 30

  web:
    image: glitchtip/glitchtip
    restart: unless-stopped
    depends_on: *default-depends_on
    environment: *default-environment
    volumes:
      - ./data/uploads:/code/uploads

  worker:
    image: glitchtip/glitchtip
    restart: unless-stopped
    depends_on: *default-depends_on
    environment: *default-environment
    volumes:
      - ./data/uploads:/code/uploads
    command: ./bin/run-celery-with-beat.sh

  migrate:
    image: glitchtip/glitchtip
    depends_on: *default-depends_on
    environment: *default-environment
    command: './manage.py migrate'

  dbbackups:
    # https://github.com/prodrigestivill/docker-postgres-backup-local
    image: prodrigestivill/postgres-backup-local
    depends_on:
      - postgres
    restart: unless-stopped
    # user: postgres:postgres
    volumes:
      - ./data/postgres-backups:/backups
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # - POSTGRES_PASSWORD_FILE=/run/secrets/db_password <-- alternative for POSTGRES_PASSWORD (to use with docker secrets)
      - POSTGRES_EXTRA_OPTS=-Z6 --schema=public --blobs
      - SCHEDULE=${DBBACKUPS_SCHEDULE}
      - BACKUP_KEEP_DAYS=${DBBACKUPS_BACKUP_KEEP_DAYS}
      - BACKUP_KEEP_WEEKS=${DBBACKUPS_BACKUP_KEEP_WEEKS}
      - BACKUP_KEEP_MONTHS=${DBBACKUPS_BACKUP_KEEP_MONTHS}
      - HEALTHCHECK_PORT=${DBBACKUPS_HEALTHCHECK_PORT}
