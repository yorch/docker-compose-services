services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    networks:
      - traefik
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/opt/traefik
      - ./logs:/opt/logs
    command:
      # Dashboard
      - '--api' # Enables the web UI
      - '--global.sendanonymoususage=false'
      # Entrypoints (with HTTPS redirect)
      - '--entrypoints.web.address=:80'
      - '--entrypoints.web.http.redirections.entryPoint.to=websecure'
      - '--entrypoints.web.http.redirections.entryPoint.scheme=https'
      - '--entrypoints.web.http.redirections.entrypoint.permanent=true'
      - '--entrypoints.websecure.address=:443'
      # Let's Encrypt
      # Through HTTP challenge
      - '--certificatesResolvers.webcert.acme.tlschallenge=true'
      # Or through DNS challenge using Digital Ocean
      # - '--certificatesresolvers.webcert.acme.dnschallenge=true'
      # - '--certificatesresolvers.webcert.acme.dnschallenge.provider=digitalocean'
      - '--certificatesResolvers.webcert.acme.email=${ACME_EMAIL?Variable ACME_EMAIL not set}'
      - '--certificatesResolvers.webcert.acme.storage=/opt/traefik/acme.json'
      # Docker Provider
      - '--providers.docker' # Tells Traefik to listen to docker
      - '--providers.docker.exposedbydefault=false'
      - '--providers.docker.watch'
      # Logging
      - '--accesslog'
      - '--log'
      - '--log.level=${TRAEFIK_LOG_LEVEL:-INFO}'
      # - '--log.filePath=/opt/logs/traefik.log'
      # - '--log.format=json'
      # Metrics (Influx v1)
      # - '--metrics.influxdb=true'
      # - '--metrics.influxdb.address=${INFLUXDB_HOST}'
      # - '--metrics.influxdb.database=${INFLUXDB_DATABASE}'
      # - '--metrics.influxdb.username=${INFLUXDB_USERNAME}'
      # - '--metrics.influxdb.password=${INFLUXDB_PASSWORD}'
      # Metrics (Influx v2)
      # - '--metrics.influxdb2=true'
      # - '--metrics.influxdb2.address=${INFLUXDB2_URL}'
      # - '--metrics.influxdb2.token=${INFLUXDB2_TOKEN}'
      # - '--metrics.influxdb2.org=${INFLUXDB2_ORG}'
      # - '--metrics.influxdb2.bucket=${INFLUXDB2_BUCKET}'
      # - '--metrics.influxdb2.addEntryPointsLabels=true'
      # - '--metrics.influxdb2.addrouterslabels=true'
      # - '--metrics.influxdb2.addServicesLabels=true'
      # - '--metrics.influxdb2.pushInterval=10s'
      # - '--metrics.influxdb2.additionallabels.host=${TRAEFIK_HOST}'
      # Metrics (Prometheus)
      # - '--metrics.prometheus=true'
      # - '--metrics.prometheus.buckets=0.1,0.3,1.2,5.0'
      # - '--metrics.prometheus.addEntryPointsLabels=true'
      # - '--metrics.prometheus.addRoutersLabels=true'
      # - '--metrics.prometheus.addServicesLabels=true'
      # - '--metrics.prometheus.entryPoint=metrics'
      # - '--metrics.prometheus.additionallabels.host=${TRAEFIK_HOST}'
      # environment:
      # Digital Ocean Token can be used for Let's Encrypt DNS challenge
      # - 'DO_AUTH_TOKEN=${DO_AUTH_TOKEN}'
    labels:
      - 'traefik.enable=true'
      # HTTPS Host
      - 'traefik.http.routers.traefik-api.rule=Host(`${TRAEFIK_HOST?Variable TRAEFIK_HOST not set}`)'
      - 'traefik.http.routers.traefik-api.entrypoints=websecure'
      - 'traefik.http.routers.traefik-api.tls=true'
      - 'traefik.http.routers.traefik-api.tls.certResolver=webcert'
      - 'traefik.http.routers.traefik-api.service=api@internal'

networks:
  traefik:
    external: true
